#define _CRT_SECURE_NO_WARNGINGS 1
#include <iostream>
using namespace std;


int cnt = 0; // 全局域，不安全
class Date{

	//Date(){

	//}
public:
	Date(int year = 2020 , int month = 5, int day=27)
	:_year(year)
	,_month(month)
	,_day(day){
		++cnt;
		++count;
		cout << "Date(int , int , int)" << endl;
	}

	Date(const Date& d)
		:_year(d._year)
		,_month(d._month)
		,_day(d._day){
		cout << "Date(const Date& d)" << endl;
		++cnt;
		++count;
	}

	// 静态成员函数
	// 静态成员函数不能访问非静态成员函数和非静态成员变量
	// 静态成员函数：函数内部没有 this 指针
	// 底层没有 getCount( const Date* this ) : 只有 getCount()
	// 静态成员函数不能访问非静态成员函数/变量
	// 因为非静态成员需要this指针,
	// 但是静态成员函数内部缺少this指针，所以不能访问
 	static int getCount(){
		return count;
	}

	// 普通成员函数只能通过对象访问
	// 不能通过类来访问
	// 非静态成员函数可以访问静态成员函数和静态成员变量
	void showinfo(){
		cout << _year << endl;
	}

	// 支持连续的输出，从左向右输出
	ostream& operator<<(ostream& _cout){
		_cout << _year << "-" << _month << "-" << _day << endl;
		return _cout;
	}
	friend ostream& operator<<(ostream& _cout, Date& d);
	friend istream& operator>>(istream& _cin, Date& d); 
	friend class B;
private:
	// C++11 初始化方式：相当于给一个缺省值
	// 此处的默认值是最后一个候选的
	int _year = 1;
	int _month = 1;
	int _day = 1;
	// 静态成员变量，所有对象共享此成员变量，可以看成类成员
	// 静态成员不能在声明的时候给默认值
	// 不能在初始化对象的时候初始化static变量
	// 静态成员不在对象模型中，一般存在数据段，不能在初始化列表中初始化
	// 在类外初始化
	static int count ; // 所有对象共享的变量
};

// 静态成员必须在类外初始化
int Date::count = 0;

Date fun(Date d){ // 拷贝构造
	return d; // 返回的时候给函数，拷贝构造
}

/*
void test1(){
	Date d; // 构造
	Date d2 = fun(d); // 拷贝构造，此处有优化，返回值没有作用，因此直接优化，直接用局部对象d拷贝创建给d2
	cout <<"d = " << d.getCount() << endl;
	cout << "d2 = "<<d2.getCount() << endl;
	// 静态成员变量访问方式
	// 1、对象访问
	// 2、类名+作用域限定符
	cout << "Date = " << Date::count << endl;
	cout << "*&Date = " << *&Date::count << endl;

	cout << "static getCount = " << Date::getCount() << endl;
}
*/
// 友元函数可以访问类的私有成员
// 友元函数本身不是本类的成员函数，它是普通的非成员函数
// 友元函数只需要在类中定义，不需要在类中定义
// 返回输出流是为了支持连续赋值
// 传入引用，则变量的生命周期长于函数，则可以返回引用
// 友元函数尽量少用，这是一种突破了封装的概念
// 友元函数可以声明在类的任何地方限制，不受限定符限制
// 友元关系不能传递，类似于朋友的朋友不一定是自己的朋友，必须明确标识，不可以靠推导得到得到友元关系
ostream& operator<<(ostream& _cout, Date& d){
	_cout << d._year << "-" << d._month << "-" << d._day << endl;
	return _cout;
}

istream& operator>>(istream& _cin, Date& d){
	_cin >> d._year >> d._month >> d._day;
	return _cin;
}
void test3(){
	Date d(2020, 5, 26);
	d << cout;

	operator<<(operator<<(cout, d), d); 

	Date d3;
	// 从左向右输入
	cin >> d3>>d3;
	cout << d3;
}
 
//要让B访问Date的私有成员，就要让类B成为类Date的友元类
class B{

public:
	// 当前类成为了Date类的私有成员就可以访问Date类的私有成员
	// 如果一个类是另一个类的友元函数，则此类中的所有成员函数就是另一个类的友元函数
	// friend 是单向的，想要相互访问，必须要双向声明
	// 外部类不能看作内部类的友元类，对于内部类的成员没有特殊访问权限，需要遵循访问限定符的限制
	void display(const Date& d){
		cout << d._year << "-" << d._month << "-" << d._day << endl;
	}
};

enum Color{
	GREEN,
	YELLOW
};
class C{
public:
	// 内部类，在一个类中定义一个新的类,内部类可以在类的任何地方定义
	// 内部类天然的作为外部类的友元类 
public:
	// 内部类是作为一个独立的类存在，并不附属于外部类
	class D{
	public:
		// 内部类中的成员函数可以通过外部类对象访问外部类的私有成员
		void showinfo(const C& c){
			// 静态成员可以直接访问，或者类名访问
			// 可以直接访问外部类的静态成员
			cout << _sc << endl;
			cout << C::_sc << endl;
			cout << c._a << endl;
			// 枚举类型也只能通过对象来访问，不能直接访问
			cout << c.color << endl;
		}
	private:
		int _da;
		int _db;
	};
private:
	int _a;
	int _b;
	static int _sc;
	Color color;
};
void main(){
	test3();
	//test1();
	//cout << cnt << endl;
	cout << "end" << endl;
	C c;
	C::D dd;
	dd.showinfo(c);
	while (1);
	system("pause");
}
